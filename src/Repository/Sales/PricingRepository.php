<?php

namespace App\Repository\Sales;

use App\Entity\Sales\Channel;
use App\Entity\Sales\Inventory;
use App\Entity\Sales\Pricing;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;


/**
 * PricingRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class PricingRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct( $registry, Pricing::class );
    }

    /**
     * @param Channel $channel
     * @param Inventory $inventory
     * @param \DateTime $dateTime
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function fetchPricing(Channel $channel,Inventory $inventory,\DateTime $dateTime)
    {
        $qb = $this->createQueryBuilder('pricing')
                ->select('pricing','inventory','channel')
                ->leftJoin('pricing.channel','channel')
                ->innerJoin('pricing.inventory','inventory')
                ->where('channel=:channel')
                ->andWhere('pricing.startAt<=:dateTime')
                ->andWhere('inventory=:inventory')
                ->orderBy('pricing.startAt','DESC');
        $query = $qb->getQuery();
        $query->setParameters([':channel'=>$channel,
                               ':dateTime'=>$dateTime,
                               ':inventory'=>$inventory]);
        $result=$query->getSingleResult();
        return $result;
    }



    /**
     * @param Channel $channel
     * @param array $inventoryList
     * @param \DateTime $dateTime
     * @return array
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function fetchCurrentPricing(Channel $channel, array $inventoryList, \DateTime $dateTime)
    {
        $result= [];
        /** @var Inventory $inventory */
        foreach($inventoryList as $inventory)
        {
            /** @var Pricing $price */
            $price=$this->fetchPricing($channel,$inventory,$dateTime);
            $result[$price->getInventory()->getId()] = ['tag'=>$price->getInventory()->getTag()->getName(),
                                                        'description'=>$price->getInventory()->getName(),
                                                        'unitPrice'=>floatval($price->getPrice())];
        }
        return $result;
    }

    public function getEntityManager()
    {
        return parent::getEntityManager();
    }
}
