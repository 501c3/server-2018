<?php
/**
 * Copyright (c) 2018. Mark Garber
 * This work, including the code samples, is licensed under a Creative Commons BY-SA 3.0 license.
 */

/**
 * Created by PhpStorm.
 * User: mgarber
 * Date: 4/16/18
 * Time: 11:16 AM
 */

namespace App\Tests\Command;


use App\Command\CompetitionSequenceBuild;
use App\Subscriber\CommandStatusSubscriber;
use Doctrine\Common\DataFixtures\Purger\ORMPurger;
use Doctrine\DBAL\Connection;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\Dotenv\Dotenv;

class SequenceBuilderTest extends KernelTestCase
{
    private static $entityManagerModels;

    private static $entityManagerCompetition;

    protected static $kernel;

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
        // TODO: Remove next line when environment variables are set up make conditional for production
        (new Dotenv())->load(__DIR__.'/../../.env');
        // TODO: Change dev->prod, false for production
        self::$kernel = self::bootKernel();
        $container = self::$kernel->getContainer();
        self::$entityManagerModels = $container->get('doctrine.orm.models_entity_manager');
        self::$entityManagerCompetition = $container->get('doctrine.orm.competition_entity_manager');
        $purgerModels = new ORMPurger(self::$entityManagerModels);
        $purgerModels->setPurgeMode(ORMPurger::PURGE_MODE_TRUNCATE);
        /** @var Connection $connectionModels */
        $connectionModels=$purgerModels->getObjectManager()->getConnection();
        $connectionModels->query('SET FOREIGN_KEY_CHECKS=0');
        $purgerModels->purge();
        $connectionModels->query('SET FOREIGN_KEY_CHECKS=1');
        $sql=file_get_contents( __DIR__ . '/../Scripts.deprecated/SQL/model.sql' );
        $connectionModels->query($sql);
    }


    /**
     * @throws \Doctrine\DBAL\DBALException
     */

    public function setUp()
    {
        $purgerCompetition = new ORMPurger(self::$entityManagerCompetition);
        $purgerCompetition->setPurgeMode(ORMPurger::PURGE_MODE_TRUNCATE);
        /** @var Connection $connectionCompetition */
        $connectionCompetition=$purgerCompetition->getObjectManager()->getConnection();
        $connectionCompetition->query('SET FOREIGN_KEY_CHECKS=0');
        $purgerCompetition->purge();
        $connectionCompetition->query('SET FOREIGN_KEY_CHECKS=1');
    }

    private function commandBuildCompetition($testSource)
    {
        $application = new Application('Competition Test Build');
        $command = new CompetitionSequenceBuild();
        $application->add($command);
        $commandTester = new CommandTester($command);
        $executionItem=[
            'command'=>$command->getName(),
            'filename'=> __DIR__ . "/../Scripts/Yaml/Competition/$testSource"
        ];
        $commandTester->execute($executionItem);
        $output=$commandTester->getDisplay();
        return $output;
    }

    public function testConnect()
    {
        $output=$this->commandBuildCompetition('sequence-correct.yml');
        $message = 'Commencing at';
        $this->assertContains($message,$output);
    }

}